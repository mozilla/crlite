version: 2.1

orbs:
  python: circleci/python@0.2.1
  docker: circleci/docker@1.2.1
  gcp-gke: circleci/gcp-gke@1.0.4
  kubernetes: circleci/kubernetes@0.11.0

commands:
  build-and-publish:
    description: Build and publish a single image

    parameters:
      tag:
        type: string
      path:
        type: string
      extra_build_args:
        type: string
        default: ""
      suffix:
        type: string
        default: ""

    steps:
      - docker/build:
          image: ${DOCKER_IMAGE}
          tag: <<parameters.tag>><<parameters.suffix>>
          dockerfile: <<parameters.path>>/Dockerfile
          extra_build_args: <<parameters.extra_build_args>>
          step-name: build crlite<<parameters.suffix>> container
      - docker/push:
          image: ${DOCKER_IMAGE}
          tag: <<parameters.tag>><<parameters.suffix>>
          step-name: push crlite<<parameters.suffix>> container

  publish-docker-pods:
    description: Build and publish the CRLite containers

    parameters:
      tag-param:
        default: ${CIRCLE_SHA1}
        description: |
          the environment variable to use as a tag
        type: string

    steps:
      - docker/check
      - build-and-publish:
          path: containers
          tag: <<parameters.tag-param>>
      - docker/update-description:
          image: ${DOCKER_IMAGE}
      - build-and-publish:
          path: containers/crlite-fetch
          suffix: -fetch
          tag: <<parameters.tag-param>>
          extra_build_args: --build-arg crlite_image=${DOCKER_IMAGE}:<<parameters.tag-param>>
      - build-and-publish:
          path: containers/crlite-generate
          suffix: -generate
          tag: <<parameters.tag-param>>
          extra_build_args: --build-arg crlite_image=${DOCKER_IMAGE}:<<parameters.tag-param>>
      - build-and-publish:
          path: containers/crlite-publish
          suffix: -publish
          tag: <<parameters.tag-param>>
          extra_build_args: --build-arg crlite_image=${DOCKER_IMAGE}:<<parameters.tag-param>>
      - build-and-publish:
          path: containers/crlite-signoff
          suffix: -signoff
          tag: <<parameters.tag-param>>
          extra_build_args: --build-arg crlite_image=${DOCKER_IMAGE}:<<parameters.tag-param>>

jobs:
  python-build-and-test:
    executor: python/default
    steps:
      - checkout
      - run: pip install pytest
      - run: pip install black

      - run:
          name: Install Package
          command: |
            pip install --editable .
            pip install --editable create_filter_cascade
            pip install --editable moz_crlite_lib

      - run:
          name: Run Tests
          command: |
            pip install pytest
            mkdir test-results
            python -m pytest --junitxml=test-results/junit.xml

      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

      - run:
         name: Check format with Black
         command: |
            pip install black
            python -m black --check .

  golang-build-and-test:
    docker:
      # specify the version
      - image: circleci/golang:1.13


    working_directory: /go/src/github.com/mozilla.com/crlite
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run:
          name: Download and build
          command: go get -v -t -d ./...
          working_directory: /go/src/github.com/mozilla.com/crlite/go
      - run:
          name: gofmt
          command: >
            if [ -n "$(gofmt -l .)" ]; then
              echo "Go code is not formatted:"; gofmt -d .; exit 1;
            fi

          working_directory: /go/src/github.com/mozilla.com/crlite/go
      - run:
          name: Test
          command: go test -v ./...
          working_directory: /go/src/github.com/mozilla.com/crlite/go

      - run:
          name: Test with race-finder
          command: go test -race -short ./...
          working_directory: /go/src/github.com/mozilla.com/crlite/go

  publish-staging-pods:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - publish-docker-pods:
          tag-param: ${CIRCLE_SHA1}

  publish-tagged-pods:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - publish-docker-pods:
          tag-param: ${CIRCLE_TAG}

  publish-latest-pods:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - publish-docker-pods:
          tag-param: latest

  deploy-to-gke:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: ${GKE_CLUSTER_ID}
          install-kubectl: true
          perform-login: true
      - kubernetes/update-container-image:
          container-image-updates: crlite-fetch=docker.io/${DOCKER_IMAGE}:${CIRCLE_SHA1}-fetch
          resource-name: deployment/crlite-fetch
          show-kubectl-command: true
          get-rollout-status: true
          watch-timeout: 5m
      - kubernetes/update-container-image:
          container-image-updates: crlite-generate=docker.io/${DOCKER_IMAGE}:${CIRCLE_SHA1}-generate
          resource-name: cronjob/crlite-generate
          show-kubectl-command: true
      - kubernetes/update-container-image:
          container-image-updates: crlite-publish=docker.io/${DOCKER_IMAGE}:${CIRCLE_SHA1}-publish
          resource-name: cronjob/crlite-publish
          show-kubectl-command: true
      - kubernetes/update-container-image:
          container-image-updates: crlite-signoff=docker.io/${DOCKER_IMAGE}:${CIRCLE_SHA1}-signoff
          resource-name: cronjob/crlite-signoff
          show-kubectl-command: true

workflows:
  version: 2

  untagged-build:
    jobs:
      - python-build-and-test
      - golang-build-and-test
      - publish-staging-pods:
          filters:
            branches:
              only: staging
          requires:
            - python-build-and-test
            - golang-build-and-test
      - publish-latest-pods:
          filters:
            branches:
              only: main
          requires:
            - python-build-and-test
            - golang-build-and-test
      - deploy-to-gke:
          filters:
            branches:
              only: staging
          requires:
            - publish-staging-pods

  tagged-build:
    jobs:
      - python-build-and-test:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - golang-build-and-test:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-tagged-pods:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - python-build-and-test
            - golang-build-and-test
