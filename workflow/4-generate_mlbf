#!/usr/bin/env python3

from pathlib import Path
from google.api_core import exceptions

import argparse
import logging
import os
import subprocess
import sys
import tempfile
import __init__ as workflow

parser = argparse.ArgumentParser()
parser.add_argument("identifier", help="Current working identifier", nargs=1)
parser.add_argument("--nodiff", help="Avoid building a diff")


def main():
    log = logging.getLogger('generate_mlbf')
    args = parser.parse_args()

    if not args.identifier or len(args.identifier) != 1:
        parser.print_usage()
        sys.exit(0)

    parentDir = (os.path.dirname(os.path.abspath(__file__)) / Path("..")).resolve()

    exe = os.path.expanduser(f"{parentDir}/create_filter_cascade/certs_to_crlite.py")
    cmdline = [exe, "-knownPath", os.path.join(args.identifier[0], "known"),
               "-revokedPath", os.path.join(args.identifier[0], "revoked")]

    cmdline = cmdline + args.identifier

    if not args.nodiff and "GOOGLE_APPLICATION_CREDENTIALS" in os.environ:
        try:
            bucket_name = 'crlite_filters'

            latest = workflow.get_run_identifiers(bucket_name).pop()

            dest = Path(tempfile.mkdtemp()) / Path(latest)
            dest.mkdir()

            workflow.download_from_google_cloud(bucket_name, f"{latest}/mlbf/filter",
                                                dest / Path("list-revoked.keys"))
            workflow.download_from_google_cloud(bucket_name, f"{latest}/mlbf/filter.meta",
                                                dest / Path("list-valid.keys"))

            cmdline = cmdline + ["-previd", dest]
        except exceptions.NotFound as e:
            log.error(f"Could not download existing filter: {e}")

    log.info(f"Running {cmdline}")
    subprocess.run(cmdline, check=True)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
