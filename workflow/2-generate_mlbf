#!/usr/bin/env python3

from pathlib import Path
from google.api_core import exceptions
import glog as log

import argparse
import os
import subprocess
import sys
import tempfile
import __init__ as workflow

parser = argparse.ArgumentParser()
parser.add_argument("identifier", help="Current working identifier", nargs=1)
parser.add_argument("--nodiff", help="Avoid building a diff")
parser.add_argument(
    "--filter-bucket", help="Google Cloud Storage filter bucket name", required=True
)


def main():
    args = parser.parse_args()

    if not args.identifier or len(args.identifier) != 1:
        parser.print_usage()
        sys.exit(0)

    runIdPath = args.identifier[0]

    exe = os.path.expanduser(f"~/rust-create-cascade")
    cmdline = [
        exe,
        "-vv",
        "--known",
        os.path.join(runIdPath, "known"),
        "--revoked",
        os.path.join(runIdPath, "revoked"),
        "--outdir",
        os.path.join(runIdPath, "mlbf"),
        "--clobber",
    ]

    if not args.nodiff and "GOOGLE_APPLICATION_CREDENTIALS" in os.environ:
        try:
            all_runs = workflow.get_run_identifiers(args.filter_bucket)
            if all_runs:
                latest = all_runs.pop()
                dest = Path(tempfile.mkdtemp()) / Path(latest)
                dest.mkdir()
                prev_revset = dest / Path("prev_revset.bin")

                workflow.download_from_google_cloud(
                    args.filter_bucket,
                    f"{latest}/mlbf/revset.bin",
                    prev_revset,
                )

                cmdline = cmdline + ["--prev-revset", prev_revset]
        except exceptions.NotFound as e:
            log.error(f"Could not download existing filter: {e}")
        except Exception as e:
            log.error(f"Could not get any existing filter: {e}")

    log.info(f"Running {cmdline}")
    subprocess.run(cmdline, check=True)


if __name__ == "__main__":
    main()
