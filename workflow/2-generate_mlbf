#!/usr/bin/env python3

from pathlib import Path
from google.api_core import exceptions
import glog as log

import argparse
import os
import subprocess
import sys
import tempfile
import __init__ as workflow

parser = argparse.ArgumentParser()
parser.add_argument("identifier", help="Current working identifier", nargs=1)
parser.add_argument("--nodiff", help="Avoid building a diff")
parser.add_argument(
    "--filter-bucket", help="Google Cloud Storage filter bucket name", required=True
)
parser.add_argument("--statsd-host", help="StatsD host", required=False)
parser.add_argument(
    "--reason-set",
    help="Reason set [values: all, specified, key-compromise]",
    required=False,
)


def main():
    args = parser.parse_args()

    if not args.identifier or len(args.identifier) != 1:
        parser.print_usage()
        sys.exit(0)

    runIdPath = args.identifier[0]

    exe = os.path.expanduser(f"~/rust-create-cascade")
    cmdline = [
        exe,
        "-vv",
        "--known",
        os.path.join(runIdPath, "known"),
        "--revoked",
        os.path.join(runIdPath, "revoked"),
        "--clobber",
    ]

    if args.statsd_host:
        cmdline += ["--statsd-host", args.statsd_host]

    if not args.reason_set or args.reason_set == "all":
        cmdline += ["--outdir", os.path.join(runIdPath, "mlbf")]
    else:
        cmdline += [
            "--outdir",
            os.path.join(runIdPath, f"mlbf-{args.reason_set}"),
            "--reason-set",
            args.reason_set,
        ]

    if not args.nodiff and "GOOGLE_APPLICATION_CREDENTIALS" in os.environ:
        try:
            dest = Path(tempfile.mkdtemp())
            prev_revset = dest / Path("prev_revset.bin")

            workflow.download_from_google_cloud(
                args.filter_bucket,
                "latest/revset.bin",
                prev_revset,
            )

            cmdline = cmdline + ["--prev-revset", prev_revset]
        except exceptions.NotFound as e:
            log.error(f"Could not download existing filter: {e}")
        except Exception as e:
            log.error(f"Could not get any existing filter: {e}")

    log.info(f"Running {cmdline}")
    subprocess.run(cmdline, check=True)


if __name__ == "__main__":
    main()
