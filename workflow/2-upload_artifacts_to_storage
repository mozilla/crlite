#!/usr/bin/env python3

from google.cloud import storage
from pathlib import Path

import argparse
import os
import sys
import logging

parser = argparse.ArgumentParser()
parser.add_argument("--noop", help="Don't upload", action="store_true")
parser.add_argument(
    "results_path",
    help="Path to folder to upload containing the mlbf folder",
    nargs=1,
    type=Path,
)
parser.add_argument(
    "--extra_folders", help="More folders to upload as '/path/:remote_name'", nargs="*"
)
parser.add_argument(
    "--filter-bucket", help="Google Cloud Storage filter bucket name", required=True
)

log = logging.getLogger("upload_artifacts_to_storage")


def uploadFiles(files, localFolder, remoteFolder, bucket, *, args):
    log.info(f"Uploading {len(files)} files from {localFolder} to {remoteFolder}")
    for item in files:
        localFilePath = localFolder.joinpath(item)
        remoteFilePath = remoteFolder.joinpath(item)

        if localFilePath.is_symlink():
            continue

        log.debug(
            f"Uploading {remoteFilePath} (size={localFilePath.stat().st_size}) "
            + f"from {localFilePath}"
        )

        if args.noop:
            continue

        blob = bucket.blob(str(remoteFilePath))
        blob.upload_from_filename(str(localFilePath))


def ensureFileOrAbort(idPath, path):
    filePath = idPath / Path(path)
    if not filePath.exists():
        log.error(f"{filePath} does not exist, aborting.")
        sys.exit(1)


def main():
    args = parser.parse_args()

    if not args.results_path or len(args.results_path) != 1:
        parser.print_usage()
        sys.exit(0)

    storage_client = storage.Client()
    bucket = storage_client.get_bucket(args.filter_bucket)

    idPath = args.results_path[0].resolve()

    ensureFileOrAbort(idPath, Path("mlbf/filter"))

    for path, dirs, files in os.walk(idPath):
        localFolder = Path(path)
        remoteFolder = localFolder.relative_to(idPath.parent)

        uploadFiles(files, localFolder, remoteFolder, bucket, args=args)

    if args.extra_folders:
        for extraString in args.extra_folders:
            localPath, remotePath = extraString.split(":")
            for path, dirs, files in os.walk(localPath):
                remoteFolder = (
                    Path(idPath.name) / remotePath / Path(path).relative_to(localPath)
                )
                uploadFiles(files, Path(path), remoteFolder, bucket, args=args)

    for path, dirs, files in os.walk(idPath / "mlbf"):
        remoteFolder = Path("latest")
        uploadFiles(files, Path(path), remoteFolder, bucket, args=args)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
