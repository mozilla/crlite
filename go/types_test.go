package types

import (
	"encoding/base64"
	"reflect"
	"testing"

	"github.com/mozilla/crlite/go/storage"
)

const (
	crlEmptyBase64  = `MIH2AgEBMA0GCSqGSIb3DQEBCwUAMIGRMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExDzANBgNVBAcTBklydmluZTElMCMGA1UEChMcV2VzdGVybiBEaWdpdGFsIFRlY2hub2xvZ2llczE9MDsGA1UEAxM0V2VzdGVybiBEaWdpdGFsIFRlY2hub2xvZ2llcyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eRcNMTkwOTAzMDMyMDAxWhcNMTkwOTA3MDMyMDAxWqAwMC4wHwYDVR0jBBgwFoAUWRAanffYNzT9rdULrGiuAvegvYMwCwYDVR0UBAQCAgOG`
	crlFilledBase64 = ``
)

func Test_DecodeCRL(t *testing.T) {
	data, err := base64.StdEncoding.DecodeString(crlEmptyBase64)
	if err != nil {
		t.Error(err)
	}

	emptyList, err := DecodeRawTBSCertList(data)
	if err != nil {
		t.Error(err)
	}

	if len(emptyList.RevokedCertificates) > 0 {
		t.Error("Expected an empty list.")
	}

	data, err = base64.StdEncoding.DecodeString(crlFilledBase64)
	if err != nil {
		t.Error(err)
	}

	filledList, err := DecodeRawTBSCertList(data)
	if err != nil {
		t.Error(err)
	}

	if len(filledList.RevokedCertificates) != 220 {
		t.Errorf("Expected 220 entries, got %d.", len(filledList.RevokedCertificates))
	}

	expectedSerial := storage.NewSerialFromHex("0101ea518c68c0f00789e9cd92736c75")
	actualSerial := storage.NewSerialFromBytes(filledList.RevokedCertificates[0].SerialNumber.Bytes)
	if !reflect.DeepEqual(expectedSerial, actualSerial) {
		t.Errorf("Expected %s, but got %s", expectedSerial, actualSerial)
	}
}

func Test_SerialSet(t *testing.T) {
	testSerials := []storage.Serial{
		storage.NewSerialFromHex("BB"),
		storage.NewSerialFromHex("AA"),
	}

	set := NewSerialSet()
	isNew := set.Add(testSerials[0])
	if isNew == false {
		t.Error("Should have been new")
	}
	isNew = set.Add(testSerials[0])
	if isNew == true {
		t.Error("Should not have been new")
	}
	isNew = set.Add(testSerials[1])
	if isNew == false {
		t.Error("Should have been new")
	}

	actualSerials := set.List()

	if len(actualSerials) != len(testSerials) {
		t.Error("Length mismatch")
	}

	for _, i := range actualSerials {
		var seen bool
		for _, j := range testSerials {
			if j.ID() == i.ID() {
				seen = true
				break
			}
		}
		if !seen {
			t.Errorf("Didn't find %v", i)
		}
	}
}
